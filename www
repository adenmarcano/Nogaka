<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Nogaka - Dive Into Anime & Manga</title>
  <link rel="stylesheet" href="styles.css"/>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>
</head>
<body>
  <!-- Header Include -->
  <div id="header-container"></div>

  <!-- Main Content -->
  <main class="container">
    <style>
        :root {
          --green: #75A439;
          --teal: #167D9D;
          --dark-purple: #301934;
          --dark-blue: #18203D;
          --light-teal: #177E9D;
          --text-light: #E0E0E0;
          --text-lighter: #FFFFFF;
          --text-gray: #B0B0B0;
          --bg-dark: #121212;
        }
        
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
          background-color: var(--bg-dark);
          color: var(--text-light);
          line-height: 1.6;
          display: flex;
          flex-direction: column;
          min-height: 100vh;
          width: 85%;
          margin: 0 auto;
        }
        
        .main-container {
          display: flex;
          max-width: 1400px;
          margin: 0 auto;
          padding: 20px;
          gap: 30px;
          width: 100%;
        }
        
        .content-area {
          flex: 1;
          max-width: 1000px;
        }
        
        .sidebar {
          width: 300px;
          position: sticky;
          top: 20px;
          height: fit-content;
        }
        
        /* Header Styles */
        .hero {
          text-align: center;
          padding: 40px 0;
          background: linear-gradient(135deg, var(--dark-blue), var(--dark-purple));
          color: var(--text-lighter);
          border-radius: 8px;
          margin-bottom: 30px;
        }
        
        .highlight {
          color: var(--green);
        }
        
        .cta-button {
          display: inline-block;
          padding: 12px 24px;
          background: var(--green);
          color: var(--text-lighter);
          text-decoration: none;
          border-radius: 6px;
          margin-top: 20px;
          transition: all 0.3s;
          font-size: 18px;
          font-weight: 600;
        }
        
        .cta-button:hover {
          background: var(--dark-purple);
          transform: translateY(-2px);
          box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        }
        
        /* Search and Filter Section */
        .search-filter {
          background: var(--dark-purple);
          padding: 25px;
          border-radius: 8px;
          box-shadow: 0 4px 15px rgba(0,0,0,0.2);
          margin-bottom: 30px;
          border: 1px solid rgba(255,255,255,0.1);
        }
        
        .search-bar {
          display: flex;
          gap: 10px;
          margin-bottom: 20px;
        }
        
        .search-bar input {
          flex: 1;
          padding: 14px 24px;
          background: var(--dark-blue);
          border: 2px solid var(--green);
          color: var(--text-light);
          border-radius: 30px;
          font-size: 16px;
          outline: none;
          transition: all 0.3s;
        }
        
        .search-bar input:focus {
          border-color: var(--teal);
          box-shadow: 0 0 0 3px rgba(117, 164, 57, 0.3);
        }
        
        .search-bar input::placeholder {
          color: var(--text-gray);
        }
        
        .search-bar button {
          background: var(--teal);
          color: var(--text-lighter);
          border: none;
          border-radius: 30px;
          padding: 0 30px;
          cursor: pointer;
          font-weight: bold;
          font-size: 16px;
          transition: all 0.3s;
        }
        
        .search-bar button:hover {
          background: var(--green);
          transform: translateY(-2px);
        }
        
        /* Genre Filter */
        .genre-filter h3 {
          margin-bottom: 15px;
          color: var(--text-lighter);
          font-size: 18px;
        }
        
        .genre-buttons {
          display: flex;
          flex-wrap: wrap;
          gap: 10px;
        }
        
        .genre-btn {
          padding: 8px 18px;
          background: var(--dark-blue);
          color: var(--text-light);
          border: 1px solid var(--teal);
          border-radius: 20px;
          cursor: pointer;
          transition: all 0.2s;
          font-size: 14px;
        }
        
        .genre-btn:hover, .genre-btn.active {
          background: var(--green);
          color: var(--dark-blue);
          border-color: var(--green);
          font-weight: 600;
        }
        
        /* Random Recommendation Button */
        .random-btn {
          display: block;
          width: 100%;
          padding: 15px;
          background: var(--dark-purple);
          color: var(--text-lighter);
          border: 2px solid var(--green);
          border-radius: 6px;
          font-size: 18px;
          font-weight: bold;
          cursor: pointer;
          margin: 25px 0;
          transition: all 0.3s;
        }
        
        .random-btn:hover {
          background: var(--green);
          color: var(--dark-blue);
          transform: translateY(-3px);
          box-shadow: 0 4px 15px rgba(117, 164, 57, 0.4);
        }
        
        /* Manga Grid */
        .section-title {
          margin: 40px 0 25px;
          color: var(--green);
          font-size: 28px;
          border-bottom: 3px solid var(--teal);
          padding-bottom: 10px;
          font-weight: 700;
        }
        
        .manga-grid {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
          gap: 30px;
        }
        
        .manga-card {
          background: var(--dark-blue);
          border-radius: 10px;
          overflow: hidden;
          box-shadow: 0 6px 18px rgba(0,0,0,0.3);
          transition: all 0.3s;
          border: 1px solid rgba(117, 164, 57, 0.2);
        }
        
        .manga-card:hover {
          transform: translateY(-8px);
          box-shadow: 0 12px 25px rgba(0,0,0,0.4);
          border-color: var(--green);
        }
        
        .manga-card img {
          width: 100%;
          height: 260px;
          object-fit: cover;
          border-bottom: 1px solid rgba(117, 164, 57, 0.3);
        }
        
        .manga-info {
          padding: 15px;
        }
        
        .manga-info h3 {
          margin-bottom: 8px;
          font-size: 16px;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          color: var(--text-lighter);
        }
        
        .manga-info p {
          font-size: 14px;
          color: var(--text-gray);
          margin-bottom: 5px;
        }
        
        .manga-score {
          display: flex;
          align-items: center;
          margin-top: 8px;
          color: #ff9e3b;
          font-weight: 600;
          font-size: 15px;
        }
        
        /* Favorites Sidebar */
        .favorites-section {
          background: var(--dark-purple);
          padding: 20px;
          border-radius: 10px;
          box-shadow: 0 4px 15px rgba(0,0,0,0.3);
          border: 1px solid rgba(117, 164, 57, 0.3);
        }
        
        .favorites-section h3 {
          color: var(--green);
          font-size: 20px;
          margin-bottom: 15px;
          display: flex;
          align-items: center;
          gap: 8px;
        }
        
        .favorites-list {
          margin-top: 15px;
        }
        
        .favorite-item {
          display: flex;
          align-items: center;
          padding: 12px 0;
          border-bottom: 1px solid rgba(117, 164, 57, 0.3);
        }
        
        .favorite-item img {
          width: 60px;
          height: 80px;
          object-fit: cover;
          border-radius: 4px;
          margin-right: 12px;
          border: 1px solid rgba(255,255,255,0.1);
        }
        
        .favorite-info h4 {
          font-size: 15px;
          margin-bottom: 5px;
          color: var(--text-lighter);
        }
        
        .favorite-info p {
          font-size: 13px;
          color: var(--text-gray);
        }
        
        .remove-favorite {
          margin-left: auto;
          color: var(--teal);
          cursor: pointer;
          font-size: 16px;
          transition: all 0.2s;
        }
        
        .remove-favorite:hover {
          color: var(--green);
          transform: scale(1.1);
        }
        
        .empty-message {
          color: var(--text-gray);
          text-align: center;
          padding: 20px 0;
          font-style: italic;
        }
        
        /* Loading States */
        .loading {
          display: flex;
          justify-content: center;
          align-items: center;
          height: 200px;
          font-size: 18px;
          color: var(--text-gray);
          background: var(--dark-blue);
          border-radius: 8px;
          border: 1px dashed var(--green);
        }
        
        .loading i {
          margin-right: 10px;
          animation: spin 1s linear infinite;
          color: var(--green);
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        /* Error States */
        .error {
          color: var(--green);
          text-align: center;
          padding: 25px;
          background: var(--dark-purple);
          border-radius: 8px;
          border: 1px solid var(--teal);
          font-size: 16px;
        }
        
        .error i {
          margin-bottom: 10px;
          font-size: 24px;
        }
        
        /* Responsive Design */
        @media (max-width: 1200px) {
          body {
            width: 95%;
          }
          
          .main-container {
            flex-direction: column;
          }
          
          .sidebar {
            width: 100%;
            position: static;
            margin-top: 40px;
          }
        }
        
        @media (max-width: 768px) {
          body {
            width: 100%;
            padding: 0 15px;
          }
          
          .manga-grid {
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 20px;
          }
          
          .search-bar {
            flex-direction: column;
          }
          
          .search-bar button {
            width: 100%;
            padding: 14px;
          }
          
          .section-title {
            font-size: 24px;
          }
        }
        
        @media (max-width: 480px) {
          .manga-grid {
            grid-template-columns: repeat(auto-fill, minmax(130px, 1fr));
            gap: 15px;
          }
          
          .manga-card img {
            height: 200px;
          }
          
          .search-filter {
            padding: 15px;
          }
          
          .random-btn {
            font-size: 16px;
            padding: 12px;
          }
        }
      </style>
    </head>
    <body>
      <!-- Header Include -->
      <div id="header-container"></div>
    
      <!-- Main Content -->
      <div class="main-container">
        <div class="content-area">
          <!-- Hero Section -->
    
    
          <!-- Search and Filter Section -->
          <section class="search-filter">
            <div class="search-bar">
              <input type="text" id="search-input" placeholder="Search manga...">
              <button id="search-btn"><i class="fas fa-search"></i> Search</button>
            </div>
            
            <div class="genre-filter">
              <h3>Filter by Genre</h3>
              <div class="genre-buttons" id="genre-buttons">
                <!-- Will be populated by JavaScript -->
              </div>
            </div>
          </section>
          
          <!-- Random Recommendation Button -->
          <button id="random-btn" class="random-btn">
            <i class="fas fa-random"></i> Get Random Recommendations
          </button>
          
          <!-- Top Manga Section -->
          <h2 class="section-title">Popular Manga</h2>
          <div class="manga-grid" id="top-manga">
            <div class="loading">
              <i class="fas fa-spinner"></i> Loading popular manga...
            </div>
          </div>
          
          <!-- Random Recommendations -->
          <h2 class="section-title">You Might Also Like</h2>
          <div class="manga-grid" id="random-manga">
            <div class="loading">
              <i class="fas fa-spinner"></i> Loading recommendations...
            </div>
          </div>
        </div>
        
        <!-- Favorites Sidebar -->
        <aside class="sidebar">
          <div class="favorites-section">
            <h3><i class="fas fa-heart"></i> Your Favorites</h3>
            <div class="favorites-list" id="favorites-list">
              <p class="empty-message">No favorites yet. Click the heart icon on manga to add them here!</p>
            </div>
          </div>
        </aside>
      </div>
    
      <!-- Footer Include -->
      <div id="footer-container"></div>
    
      <script>
        // Jikan API base URL
        const JIKAN_API = 'https://api.jikan.moe/v4';
        
        // Common manga genres
        const GENRES = [
          'Action', 'Adventure', 'Comedy', 'Drama', 'Fantasy',
          'Horror', 'Mystery', 'Romance', 'Sci-Fi', 'Slice of Life'
        ];
        
        // Current filters
        let currentFilter = {
          search: '',
          genre: ''
        };
        
        // Favorites storage
        let favorites = JSON.parse(localStorage.getItem('mangaFavorites')) || [];
        
        // DOM elements
        const topMangaGrid = document.getElementById('top-manga');
        const randomMangaGrid = document.getElementById('random-manga');
        const genreButtonsContainer = document.getElementById('genre-buttons');
        const searchInput = document.getElementById('search-input');
        const searchBtn = document.getElementById('search-btn');
        const randomBtn = document.getElementById('random-btn');
        const favoritesList = document.getElementById('favorites-list');
        
        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
          // Load your header and footer
          loadHeaderFooter();
          
          // Load genre buttons
          loadGenreButtons();
          
          // Load initial manga data
          fetchTopManga();
          fetchRandomManga();
          
          // Load favorites
          renderFavorites();
          
          // Set up event listeners
          searchBtn.addEventListener('click', handleSearch);
          searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') handleSearch();
          });
          
          randomBtn.addEventListener('click', fetchRandomManga);
        });
        
        // Load your original header and footer
        function loadHeaderFooter() {
          // Header (from your original code)
          const headerHTML = `
            <header>
              <nav>
                <a href="/">Home</a>
                <a href="/manga">Manga</a>
                <a href="/anime">Anime</a>
                <div class="auth-buttons">
                  <button class="btn-signin">Sign In</button>
                  <button class="btn-signup">Sign Up</button>
                </div>
              </nav>
            </header>
          `;
          document.getElementById('header-container').innerHTML = headerHTML;
          
          // Footer (from your original code)
          const footerHTML = `
            <footer>
              <div class="footer-bottom">
                <p>&copy; ${new Date().getFullYear()} Nogaka. All rights reserved.</p>
              </div>
            </footer>
          `;
          document.getElementById('footer-container').innerHTML = footerHTML;
          
          // Initialize header interactions (from your original code)
          initHeaderScripts();
        }
        
        // Header interactions (from your original code)
        function initHeaderScripts() {
          document.querySelector('.btn-signin')?.addEventListener('click', () => {
            alert('Redirecting to Sign In');
          });
          document.querySelector('.btn-signup')?.addEventListener('click', () => {
            alert('Redirecting to Sign Up');
          });
        }
        
        // Load genre filter buttons
        function loadGenreButtons() {
          // Clear existing buttons
          genreButtonsContainer.innerHTML = '';
          
          // Add "All" button
          const allBtn = document.createElement('button');
          allBtn.className = 'genre-btn active';
          allBtn.textContent = 'All';
          allBtn.addEventListener('click', () => {
            document.querySelector('.genre-btn.active').classList.remove('active');
            allBtn.classList.add('active');
            currentFilter.genre = '';
            fetchTopManga();
          });
          genreButtonsContainer.appendChild(allBtn);
          
          // Add genre buttons
          GENRES.forEach(genre => {
            const btn = document.createElement('button');
            btn.className = 'genre-btn';
            btn.textContent = genre;
            btn.addEventListener('click', () => {
              document.querySelector('.genre-btn.active').classList.remove('active');
              btn.classList.add('active');
              currentFilter.genre = genre.toLowerCase();
              fetchTopManga();
            });
            genreButtonsContainer.appendChild(btn);
          });
        }
        
        // Handle search
        function handleSearch() {
          currentFilter.search = searchInput.value.trim();
          fetchTopManga();
        }
        
        // Fetch top manga based on current filters
        async function fetchTopManga() {
          topMangaGrid.innerHTML = `
            <div class="loading">
              <i class="fas fa-spinner"></i> Loading manga...
            </div>
          `;
          
          try {
            let url = `${JIKAN_API}/top/manga?limit=12`;
            
            if (currentFilter.genre) {
              // First try to find the genre in our list to get its index
              const genreIndex = GENRES.findIndex(g => g.toLowerCase() === currentFilter.genre);
              if (genreIndex !== -1) {
                url = `${JIKAN_API}/manga?genres=${genreIndex+1}&order_by=popularity&limit=12`;
              }
            }
            
            if (currentFilter.search) {
              url = `${JIKAN_API}/manga?q=${encodeURIComponent(currentFilter.search)}&order_by=popularity&limit=12`;
            }
            
            const response = await fetch(url);
            
            if (!response.ok) throw new Error(`API error: ${response.status}`);
            
            const { data } = await response.json();
            
            displayManga(data, topMangaGrid);
          } catch (error) {
            console.error('Error fetching manga:', error);
            topMangaGrid.innerHTML = `
              <div class="error">
                <i class="fas fa-exclamation-triangle"></i>
                <p>Failed to load manga. Please try again later.</p>
                <p><small>${error.message}</small></p>
              </div>
            `;
          }
        }
        
        // Fetch random manga recommendations
        async function fetchRandomManga() {
          randomMangaGrid.innerHTML = `
            <div class="loading">
              <i class="fas fa-spinner"></i> Loading recommendations...
            </div>
          `;
          
          try {
            // Get random page (1-10) to get varied results
            const randomPage = Math.floor(Math.random() * 10) + 1;
            const response = await fetch(`${JIKAN_API}/top/manga?page=${randomPage}&limit=6`);
            
            if (!response.ok) throw new Error(`API error: ${response.status}`);
            
            const { data } = await response.json();
            
            // Shuffle the results for more randomness
            const shuffled = data.sort(() => 0.5 - Math.random());
            displayManga(shuffled.slice(0, 6), randomMangaGrid);
          } catch (error) {
            console.error('Error fetching random manga:', error);
            randomMangaGrid.innerHTML = `
              <div class="error">
                <i class="fas fa-exclamation-triangle"></i>
                <p>Could not load recommendations</p>
              </div>
            `;
          }
        }
        
        // Display manga in a grid
        function displayManga(mangaList, container) {
          if (!mangaList || mangaList.length === 0) {
            container.innerHTML = '<div class="error">No manga found matching your criteria.</div>';
            return;
          }
          
          container.innerHTML = '';
          
          mangaList.forEach(manga => {
            const card = document.createElement('div');
            card.className = 'manga-card';
            
            // Check if this manga is in favorites
            const isFavorite = favorites.some(fav => fav.mal_id === manga.mal_id);
            
            card.innerHTML = `
              <img src="${manga.images?.jpg?.image_url || 'https://via.placeholder.com/160x240'}" alt="${manga.title}">
              <div class="manga-info">
                <h3>${manga.title}</h3>
                <p>${manga.authors?.[0]?.name || 'Unknown author'}</p>
                <div class="manga-score">
                  <i class="fas fa-star"></i>
                  ${manga.score || 'N/A'}
                  <span class="favorite-icon" style="margin-left: auto; cursor: pointer; color: ${isFavorite ? 'var(--teal)' : 'var(--text-gray)'};">
                    <i class="fas fa-heart"></i>
                  </span>
                </div>
              </div>
            `;
            
            // Add favorite toggle functionality
            const favoriteIcon = card.querySelector('.favorite-icon');
            favoriteIcon.addEventListener('click', (e) => {
              e.stopPropagation();
              toggleFavorite(manga);
              
              // Update the icon color immediately
              const isNowFavorite = !isFavorite;
              favoriteIcon.style.color = isNowFavorite ? 'var(--teal)' : 'var(--text-gray)';
              
              // Re-render favorites list
              renderFavorites();
            });
            
            container.appendChild(card);
          });
        }
        
        // Toggle manga in favorites
        function toggleFavorite(manga) {
          const index = favorites.findIndex(fav => fav.mal_id === manga.mal_id);
          
          if (index === -1) {
            // Add to favorites
            favorites.push({
              mal_id: manga.mal_id,
              title: manga.title,
              image_url: manga.images?.jpg?.image_url,
              author: manga.authors?.[0]?.name || 'Unknown',
              score: manga.score
            });
          } else {
            // Remove from favorites
            favorites.splice(index, 1);
          }
          
          // Save to localStorage
          localStorage.setItem('mangaFavorites', JSON.stringify(favorites));
        }
        
        // Render favorites list
        function renderFavorites() {
          if (favorites.length === 0) {
            favoritesList.innerHTML = '<p class="empty-message">No favorites yet. Click the heart icon on manga to add them here!</p>';
            return;
          }
          
          favoritesList.innerHTML = '';
          
          favorites.forEach(manga => {
            const favoriteItem = document.createElement('div');
            favoriteItem.className = 'favorite-item';
            favoriteItem.innerHTML = `
              <img src="${manga.image_url || 'https://via.placeholder.com/50x70'}" alt="${manga.title}">
              <div class="favorite-info">
                <h4>${manga.title}</h4>
                <p>${manga.author}</p>
              </div>
              <span class="remove-favorite" data-id="${manga.mal_id}">
                <i class="fas fa-times"></i>
              </span>
            `;
            
            // Add remove functionality
            const removeBtn = favoriteItem.querySelector('.remove-favorite');
            removeBtn.addEventListener('click', () => {
              favorites = favorites.filter(fav => fav.mal_id !== manga.mal_id);
              localStorage.setItem('mangaFavorites', JSON.stringify(favorites));
              renderFavorites();
              
              // Also update heart icons in the main lists
              updateFavoriteIcons();
            });
            
            favoritesList.appendChild(favoriteItem);
          });
        }
        
        // Update favorite icons in manga lists after changes
        function updateFavoriteIcons() {
          document.querySelectorAll('.manga-card').forEach(card => {
            const malId = card.dataset.id;
            if (!malId) return;
            
            const isFavorite = favorites.some(fav => fav.mal_id == malId);
            const icon = card.querySelector('.favorite-icon i');
            if (icon) {
              icon.style.color = isFavorite ? 'var(--teal)' : 'var(--text-gray)';
            }
          });
        }
      </script>
    </body>
    </html>
  </main>

  <!-- Footer Include -->
  <div id="footer-container"></div>

  <!-- JavaScript to load header and footer -->
  <script>
    // Load Header
    fetch('header.html')
      .then(response => response.text())
      .then(data => {
        document.getElementById('header-container').innerHTML = data;
        initHeaderScripts();
      });

    // Load Footer
    fetch('footer.html')
      .then(response => response.text())
      .then(data => {
        document.getElementById('footer-container').innerHTML = data;
        initFooterScripts();
      });

    // Header interactions
    function initHeaderScripts() {
      document.querySelector('.btn-signin')?.addEventListener('click', () => {
        alert('Redirecting to Sign In');
      });
      document.querySelector('.btn-signup')?.addEventListener('click', () => {
        alert('Redirecting to Sign Up');
      });
    }

    // Footer interactions
    function initFooterScripts() {
      const copyright =
        document.querySelector('.footer-bottom p');
      if (copyright) {
        const year = new Date().getFullYear();
        copyright.innerHTML = 
          `&copy; ${year} Nogaka. All rights reserved.`;
      }
    }
  </script>
</body>
</html>
